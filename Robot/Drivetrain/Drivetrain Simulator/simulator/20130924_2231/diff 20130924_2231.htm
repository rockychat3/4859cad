<HTML><HEAD><TITLE> Differences Analysis</TITLE></HEAD><BODY BGCOLOR=WHITE><h3>Base file: K:\__My Documents (primary)\_ROBOTICS\CD papers (mine)\drivetrain acceleration\posted 2013-09-16\drivetrain accel h7.c</h3><h3>Compared file: K:\__My Documents (primary)\_ROBOTICS\CD papers (mine)\drivetrain acceleration\posted 2013-09-16\drivetrain accel 20130924_2231.c</h3><body onunload=exit()><form method="POST">  <p align="center"><i><font size="3">Generated by   <a href="http://www.ComponentSoftware.com/products/csdiff/" target="_blank">CSDiff</a> on  9/24/2013 10:33 PM</font></i>&nbsp;&nbsp;
  <input type="button" value="Navigate Changes" name="Navigate" onclick=pop_navigate()></p></form></body><html>
<style type="text/css">
<!--
.HDNormal {  }
.HDDeleted {  color: #00ff00;background:  #ffffff;text-decoration:line-through ; font-family: Courier New ; font-size: 10pt;}
.HDAdded {  color: #000000;background:  #ffff00;text-decoration:none ; font-family: Courier New ; font-size: 10pt;}
-->
</style>
<body>
<pre>
 <span class="HDNormal">
1:  #define build "<a name="diff" id="c0"><span class="HDDeleted">9/19/2013_1112a</span></a><span class="HDAdded">20130924_2231</span>"
2:  
3:  #include &lt;math.h&gt;
4:  #include &lt;stdio.h&gt;
5:  
6:  // The following constants define the drivetrain being modeled:
7:  
<a name="diff" id="c1"><span class="HDAdded">8:  </span></a><span class="HDAdded">// note: k1, k2, &amp; k3 have been renamed Kro, Krv, &amp; Kf
</span>9:  double Kro = <span class="HDAdded">1</span>0;  // rolling resistance tuning parameter, lbf
10: double Krv = <span class="HDDeleted">1;  </span><span class="HDAdded">0;</span> // rolling resistance tuning parameter, lbf/(ft/sec)
11: double Kf = 0.9;  // drivetrain efficiency fraction
12: 
<a name="diff" id="c2"><span class="HDAdded">13: </span></a><span class="HDAdded">double Vspec = 12;   // motor spec volts
</span>14: double Ts<span class="HDAdded">pec</span> = 343.4;   // motor stall torque, in_oz
15: double <span class="HDDeleted">Mfree</span><span class="HDAdded">Wspec</span> = 5310; // motor free speed, RPM
<span class="HDDeleted">16: </span><span class="HDDeleted">double Kt = 0.0182;  // motor torque constant, Nm/amp
</span><span class="HDAdded">17: </span><span class="HDAdded">double Ispec = 133;  // motor stall amps
</span>18: int n=4;             // number of motors
19: 
20: double G = 12.75;  // gear ratio
21: double r = 3;  // wheel radius, inches
22: 
23: double M = 150;  // vehicle mass, lbm
24: double uk = 0.7;  // coefficient of kinetic friction
25: double us = 1.0;  // coefficient of static friction
26: 
<a name="diff" id="c3"><span class="HDAdded">26: double Rcom = 0.013; // ohms, battery internal resistance plus
27:                      // wire and connection resistance
28:                      // from battery to PDB (including main breaker)
29:                      
30: double Vbat = 12.7;  // fully-charged open-circuit battery volts
31: 
32: double Rone = 0.002;  // ohms, circuit wiring and connector resistance
33:                       // from PDB to motor (including 40A breaker)
34:                   
</span></a>27: #define dt 0.001  // integration step size, seconds
28: #define tstop 1.0 // integration duration, seconds
29: 
30: // -------------- end of <a name="diff" id="c4"><span class="HDAdded">user-defined </span></a>constants -----------------
31: 
32: double  // derived constants:
<a name="diff" id="c5"><span class="HDAdded">41: Toffset, Tslope,  // offset and slope of adjusted Torque vs Speed motor curve
42: Kt,  // motor torque constant, Nm/amp
</span></a>33: Vfree,  // vehicle speed at motor free speed, meters/sec
34: W,  // vehicle weight, Newtons
35: F2A; // force to amps
36: 
37: // working variables:
38: 
39: int slipping = 0;  // state variable, init to zero
<a name="diff" id="c6"><span class="HDAdded">50: double Vm;     // Voltage at the motor
</span></a>40: double V = 0;  // vehicle speed, meters/sec
41: double x = 0;  // vehicle distance traveled, meters
42: double t,  // elapsed time, seconds
43:        a,  // vehicle acceleration, meters/sec/sec
44:        A;  // <a name="diff" id="c7"><span class="HDDeleted">motor current</span></a><span class="HDAdded">current per motor</span>, amps
45: 
46: void English2SI(void){
47: Kro *= 4.448222;  // convert lbf to Newtons
48: Krv *= 4.448222*3.28083; // convert lbf/(ft/s) to Newtons/(meter/sec)
49: Ts<a name="diff" id="c8"><span class="HDAdded">pec</span></a> *= 0.00706155;  // convert oz_in to Newton_meters
50: <span class="HDDeleted">Mfree = Mfree</span><span class="HDAdded">Wspec = Wspec</span>/60*2*3.1415926536; // convert RPM to rad/sec
51: r = r*2.54/100;  // convert inches to meters
52: M *= 0.4535924;  // convert lbm to kg
53: }
54: 
55: 
56: double accel(double V){  // compute acceleration w/ slip
57: double 
<a name="diff" id="c9"><span class="HDAdded">69: Wm, // motor speed associated with vehicle speed
</span></a>58: L,  // rolling resistance losses, Newtons
59: Tm, // motor torque, Newtons
60: Tw, // wheel torque, Newtons
61: Ft, // available vehicle force due to wheel torque, Newtons
62: F,  // slip-adjusted vehicle force due to wheel torque, Newtons
63: Fa; // vehicle accel force, Newtons
<a name="diff" id="c10"><span class="HDAdded">64: </span></a><span class="HDAdded">Wm = V/r*G;
</span>65: Tm = <span class="HDDeleted">Ts*(1-V/Vfree)</span><span class="HDAdded">Toffset-Tslope*Wm</span>; // available torque at motor @ V
66: Tw = Kf*Tm*G; // available torque at <span class="HDAdded">one </span>wheel @ V
67: Ft = Tw/r*n;  // available force at wheels @ V
68: if (Ft&gt;W*us) slipping=1;
69: else if (Ft&lt;W*uk) slipping=0;
<a name="diff" id="c11"><span class="HDDeleted">70: </span></a><span class="HDDeleted">if (slipping) F=W*uk; else F=Ft;
</span><span class="HDAdded">71: </span><span class="HDAdded">F = slipping? W*uk : Ft;
</span>72: A = F*F2A;<span class="HDAdded">    // computed here for output</span>
<span class="HDAdded">73: </span><span class="HDAdded">Vm = Vbat-n*A*Rcom-A*Rone;  // computed here for output
</span>74: L = Kro+Krv*V; // rolling resistance force
75: Fa = F-L; // net force available for acceleration
76: if (Fa&lt;0) Fa=0;
77: return Fa/M;
78: }
79: 
80: void print(void){
81: printf("%f,%f,%f,%d,%f,%f<a name="diff" id="c12"><span class="HDDeleted">\</span></a><span class="HDAdded">,%f\</span>n",t,x*3.28083,V*3.28083,slipping,a*3.28083,<span class="HDDeleted">A*4/10</span><span class="HDAdded">n*A/10,Vm</span>);
82: }
83: 
84: void Heun(void){ // numerical integration using Heun's Method
85: double Vtmp, atmp; // local scratch variables
86: for (t=dt; t&lt;=tstop; t+=dt) {
87: Vtmp = V+a*dt;  // kickstart with Euler step
88: atmp = accel(Vtmp);
89: Vtmp = V+(a+atmp)/2*dt; // recalc Vtmp trapezoidally
90: a = accel(Vtmp);  // update a
91: x+=(V+Vtmp)/2*dt;  // update x trapezoidally
92: V=Vtmp;            // update V
93: print();}
94: }
95: 
96: // for reference only; not used:
97: void Euler(void){ // numerical integration using Euler's Method
98: for (t=dt; t&lt;=tstop; t+=dt) {
99: V+=a*dt;
100:    x+=V*dt;
101:    a = accel(V); 
102:    print();}
103:    }
104:    
105:    
106:    void main(void){
107:    
108:    printf("t,feet,ft/s,slip,ft/s/s,amps/10,<a name="diff" id="c13"><span class="HDAdded">Vm,%s </span></a>Kro=%4.1f Krv=%4.1f Kf=%3.1f <span class="HDDeleted">Ts=%4.1f Kt=%5.4f Mfree=%5.0f </span><span class="HDAdded">Vspec=%3.1f Tspec=%4.1f Wspec=%5.0f Ispec=%4.1f Rcom=%4.3f Vbat=%4.2f Rone=%4.3f </span>n=%d G=%5.2f r=%3.1f M=%3.0f uk=%3.2f us=%3.2f<span class="HDDeleted"> build=%s</span>\n",
109:    <span class="HDAdded">build,</span>Kro,Krv,Kf,<span class="HDDeleted">Ts,Kt,Mfree,</span><span class="HDAdded">Vspec,Tspec,Wspec,Ispec,Rcom,Vbat,Rone,</span>n,G,r,M,uk,us<span class="HDDeleted">,build</span>); // print CSV header
110:    
111:    English2SI();
112:    
113:    // calculate Derived Constants once<a name="diff" id="c14"><span class="HDAdded">:</span></a>
<span class="HDDeleted">114:    </span><span class="HDDeleted">Vfree = Mfree*r/G;
</span><span class="HDAdded">115:    </span><span class="HDAdded">Toffset = (Tspec*Vbat*Wspec)/(Vspec*Wspec+Ispec*Rone*Wspec+Ispec*n*Rcom*Wspec);
</span><span class="HDAdded">116:    </span><span class="HDAdded">Tslope = (Tspec*Vspec)/(Vspec*Wspec+Ispec*Rone*Wspec+Ispec*n*Rcom*Wspec);
</span><span class="HDAdded">117:    </span><span class="HDAdded">Kt = Tspec/Ispec;
</span>118:    W = M*9.80665;
119:    F2A = r/(n*Kf*G*Kt); // vehicle <a name="diff" id="c15"><span class="HDDeleted">force to</span></a><span class="HDAdded">total force to per-motor</span> amps conversion
120:    
121:    a=accel(V); // compute accel at t=0
122:    print();    // output values at t=0
123:    
124:    Heun();  // numerically integrate and output using Heun's method
125:    
126:    }
</span>
</pre>
</body>
<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">
<!--
var newWind;
function putJumpCode(){
	var cnt = 16;
	newWind.document.write('<html>\n');
	newWind.document.write('<title>CSDiff Navigation</title>\n');
	newWind.document.write('<body>\n');
	newWind.document.write('<form name="jump">\n');
	newWind.document.write('<input type="button" value=" |&lt; " name="First" onclick=goto_first(this.form)>&nbsp;')
	newWind.document.write('<input type="button" value=" &lt; " name="Prev" onclick=goto_prev(this.form)>&nbsp;&nbsp;\n');
	newWind.document.write('<select name=url onchange=menu_goto(this.form)> \n');
	for (var i=0; i<cnt ;i++ ) {
		newWind.document.write('<option value="#c'+i+'">Change #'+(i+1)+ '</option> \n');
		}
	newWind.document.write('');
	newWind.document.write('</select>&nbsp;&nbsp;\n');
	newWind.document.write('<input type="button" value=" &gt; " name="Next"\n');
	newWind.document.write('onclick=goto_next(this.form)>\n');
	newWind.document.write('<input type="button" value=" &gt| " name="Last"\n');
	newWind.document.write('onclick=goto_last(this.form)>\n');
	newWind.document.write('</form>\n');
	newWind.document.write('');
	newWind.document.write('<form method="POST">\n');
	newWind.document.write('<p align="center"><i><font size="3">Generated\n');
	newWind.document.write('by <a href="http://www.ComponentSoftware.com/products/csdiff/" target="_blank">CSDiff</a> \n');
	newWind.document.write('</form>\n');
	newWind.document.write('</body>\n');
	newWind.document.write('</html>\n');
	newWind.document.write('<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">\n');
	newWind.document.write('<!--\n');
	newWind.document.write('');
	newWind.document.write('var directCloseFlag=1;\n');
	newWind.document.write('');
	newWind.document.write('function menu_goto( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('  var baseurl = opener.location.href ;\n');
	newWind.document.write('  var idx = baseurl.indexOf("#");\n');
	newWind.document.write('  if (idx > -1) {\n');
	newWind.document.write('	baseurl = baseurl.slice(0, idx);\n');
	newWind.document.write('  }');
	newWind.document.write('  selecteditem = menuform.url.selectedIndex ;\n');
	newWind.document.write('  newurl = menuform.url.options[ selecteditem ].value ;\n');
	newWind.document.write('  if (newurl.length != 0) {\n');
	newWind.document.write('    	opener.top.location.href = baseurl + newurl ;\n');
	newWind.document.write('  }');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_prev( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.selectedIndex>0) menuform.url.selectedIndex--;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_first( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = 0;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_last( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	menuform.url.selectedIndex = menuform.url.options.length-1;	\n');
	newWind.document.write('	menu_goto( menuform );\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function goto_next( menuform )\n');
	newWind.document.write('{\n');
	newWind.document.write('	if(menuform.url.options.length > (menuform.url.selectedIndex+1))\n');
	newWind.document.write('	menuform.url.selectedIndex++;\n');
	newWind.document.write('	menu_goto( menuform )\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('function restore()\n');
	newWind.document.write('{\n');
	newWind.document.write('    	focus();\n');
	newWind.document.write('	menu_goto(jump);\n');
	newWind.document.write('}');
	newWind.document.write('');
	newWind.document.write('goto_first(jump)\n');
	newWind.document.write('//-->\n');
	newWind.document.write('<');
	newWind.document.write('/SCRIPT>\n');
}
function pop_navigate(){
var isOpen = false
try {
isOpen = (newWind != null) && (!newWind.closed)
} catch (e) {}
  if (!isOpen) {
    newWind =  window.open("" ,"HtmlDiffJumpWindow","width=270,height=40")
    if (newWind.opener == null) { // for Nav 2.0x
      newWind.opener = self // this creates and sets a new prop
    }	putJumpCode();
  
} 
else 
{	newWind.execScript("restore()", "JavaScript");
  }
}
function exit(){
var isOpen = false
try {
isOpen = (newWind != null) && (!newWind.closed)
} catch (e) {}
if (isOpen) {
	newWind.close();
  }
}
//--></SCRIPT></html>
</BODY></HTML>